# Application Name
spring.application.name=Foodie

# PostgreSQL Configuration
# For Railway, these will be overridden by environment variables.
# For local development, it uses your current settings.
# PostgreSQL - support both Railway's DATABASE_URL and your custom variables
spring.datasource.url=${DATABASE_URL:${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/foodie_db}}
spring.datasource.username=${PGUSER:${SPRING_DATASOURCE_USERNAME:foodie_user}}
spring.datasource.password=${PGPASSWORD:${SPRING_DATASOURCE_PASSWORD:fiston}}

spring.datasource.driver-class-name=org.postgresql.Driver

# MongoDB Configuration
# For Railway, this will be overridden by an environment variable.
# For local development, it uses your current settings.
# Railway typically provides a full URI for MongoDB.
spring.data.mongodb.uri=${MONGO_URL:mongodb://localhost:27017/foodie_files}
# If Railway provides individual host/port/db for MongoDB (less common than URI):
spring.data.mongodb.host=${MONGO_HOST:localhost}
spring.data.mongodb.port=${MONGO_PORT:27017}
spring.data.mongodb.database=${MONGO_DATABASE:foodie_files}
spring.data.mongodb.username=${MONGO_USERNAME:}
spring.data.mongodb.password=${MONGO_PASSWORD:}


# JPA/Hibernate
# For production on Railway, consider changing ddl-auto to 'validate' or 'none'
# after the initial deployment and schema creation.
# For now, 'update' is okay for the first deployment to create/update schema.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Thymeleaf

spring.thymeleaf.cache=true
# Good for development. For production, consider setting to true.
# You can use profiles for this: spring.thymeleaf.cache=${SPRING_THYMELEAF_CACHE:true}

# Spring Security - IMPORTANT: Remove hardcoded basic auth for production
# The spring.security.user.name and spring.security.user.password properties are for
# Spring Boot's auto-configured basic authentication. You have a custom UserDetailsService
# and SecurityConfig, so these lines are likely NOT what's securing your application
# if you have defined actual users (like 'admin' with password 'adminpass' via DataInitializer).
# It's best to REMOVE these two lines to avoid confusion or unintended security holes.
# Your actual user management is through your User entity and Spring Security configuration.
# spring.security.user.name=admin  <-- REMOVE THIS FOR PRODUCTION (and generally if using custom security)
# spring.security.user.password=admin <-- REMOVE THIS FOR PRODUCTION

# If you need a default in-memory user for some specific fallback (not recommended for production),
# manage it via your SecurityConfig. Your DataInitializer creates persistent users.

# Server Port
# Railway provides a PORT environment variable. Spring Boot will pick this up.
server.port=${PORT:8080}
# Listens on PORT provided by Railway, defaults to 8080 locally

# Optional: For file uploads (profile pictures) if they are large
# spring.servlet.multipart.max-file-size=10MB
# spring.servlet.multipart.max-request-size=10MB